name: Deploy to EC2

on:
  push:
    branches: [ main ]  # 当推送到 main 分支时触发
  workflow_dispatch:    # 允许手动触发

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.22'

    - name: Generate go.sum
      run: go mod tidy

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Build Docker image
      run: |
        docker build -t game-server .
        docker save game-server > game-server.tar

    - name: Deploy to EC2
      uses: appleboy/scp-action@master
      with:
        host: ec2-13-55-71-77.ap-southeast-2.compute.amazonaws.com
        username: ubuntu
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        source: "game-server.tar,docker-compose.yml"
        target: "/home/ubuntu/game-server"

    - name: Install Docker on EC2
      uses: appleboy/ssh-action@master
      with:
        host: ec2-13-55-71-77.ap-southeast-2.compute.amazonaws.com
        username: ubuntu
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          # 检查 Docker 是否已安装
          if ! command -v docker &> /dev/null; then
            # Docker 未安装，执行安装步骤
            sudo apt-get update
            sudo apt-get install -y apt-transport-https ca-certificates curl gnupg lsb-release
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
            echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
            sudo apt-get update
            sudo apt-get install -y docker-ce docker-ce-cli containerd.io
            sudo usermod -aG docker ubuntu
            sudo systemctl start docker
            sudo systemctl enable docker
            echo "Docker installed successfully"
          else
            echo "Docker already installed"
          fi

    - name: Install Nginx
      uses: appleboy/ssh-action@master
      with:
        host: ec2-13-55-71-77.ap-southeast-2.compute.amazonaws.com
        username: ubuntu
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          # 检查 Nginx 是否已安装
          if ! command -v nginx &> /dev/null; then
            sudo apt-get update
            sudo apt-get install -y nginx
            sudo systemctl start nginx
            sudo systemctl enable nginx
            echo "Nginx installed successfully"
          else
            echo "Nginx already installed"
          fi

    - name: Configure Nginx
      uses: appleboy/ssh-action@master
      with:
        host: ec2-13-55-71-77.ap-southeast-2.compute.amazonaws.com
        username: ubuntu
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          # 检查是否已经存在配置
          if [ ! -f /etc/nginx/nginx.conf.original ]; then
            # 第一次运行时备份原始配置
            sudo cp /etc/nginx/nginx.conf /etc/nginx/nginx.conf.original
          fi
          
          # 检查配置是否需要更新
          TEMP_CONFIG=$(mktemp)
          cat > $TEMP_CONFIG << "EOF"
          worker_processes 1;

          events {
              worker_connections 1024;
              multi_accept on;
          }

          http {
              sendfile on;
              tcp_nopush on;
              tcp_nodelay on;
              keepalive_timeout 65;
              
              # ... 其他配置 ...

              server {
                  listen 80;
                  server_name ec2-13-55-71-77.ap-southeast-2.compute.amazonaws.com;
                  
                  location / {
                      proxy_pass http://127.0.0.1:8080;
                      proxy_set_header Host $host;
                      proxy_set_header X-Real-IP $remote_addr;
                  }
              }
          }
          EOF
          
          # 比较配置文件
          if ! sudo diff -q $TEMP_CONFIG /etc/nginx/nginx.conf > /dev/null; then
            # 配置有变化时才更新
            sudo mv $TEMP_CONFIG /etc/nginx/nginx.conf
            
            # 测试新配置
            if sudo nginx -t; then
              # 配置正确才重启
              sudo systemctl restart nginx
              echo "Nginx configuration updated and service restarted"
            else
              # 配置错误时恢复原配置
              sudo cp /etc/nginx/nginx.conf.original /etc/nginx/nginx.conf
              sudo systemctl restart nginx
              echo "Nginx configuration test failed, restored original config"
              exit 1
            fi
          else
            echo "Nginx configuration unchanged"
            rm $TEMP_CONFIG
          fi

    - name: Start application
      uses: appleboy/ssh-action@master
      with:
        host: ec2-13-55-71-77.ap-southeast-2.compute.amazonaws.com
        username: ubuntu
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          cd /home/ubuntu/game-server
          
          # 创建宿主机日志目录
          mkdir -p /home/ubuntu/game-server/logs
          
          docker load < game-server.tar
          docker stop game-server || true
          docker rm game-server || true
          docker run -d \
            --name game-server \
            --restart always \
            -p 8080:8080 \
            -v /home/ubuntu/game-server/logs:/root/logs \
            -e PRIVATE_KEY="${{ secrets.PRIVATE_KEY }}" \
            -e INFURA_POLYGON_URL="${{ secrets.INFURA_POLYGON_URL }}" \
            -e INFURA_BSC_URL="${{ secrets.INFURA_BSC_URL }}" \
            game-server
          docker image prune -f

    - name: Configure log rotation and disk monitor
      uses: appleboy/ssh-action@master
      with:
        host: ec2-13-55-71-77.ap-southeast-2.compute.amazonaws.com
        username: ubuntu
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          # 检查 logrotate 配置是否需要更新
          LOGROTATE_CONFIG="/etc/logrotate.d/game-server"
          TEMP_LOGROTATE=$(mktemp)
          
          cat > $TEMP_LOGROTATE << 'EOF'
          /home/ubuntu/game-server/logs/*/*/app-*.log {
            daily
            rotate 7
            maxsize 100M
            missingok
            compress
            delaycompress
            notifempty
            create 0644 ubuntu ubuntu
            dateext
            dateformat -%Y%m%d
            sharedscripts
            postrotate
              [ -f /var/run/nginx.pid ] && kill -USR1 $(cat /var/run/nginx.pid)
            endscript
          }
          EOF

          # 只在配置不存在或有变化时更新
          if [ ! -f "$LOGROTATE_CONFIG" ] || ! sudo diff -q "$TEMP_LOGROTATE" "$LOGROTATE_CONFIG" > /dev/null; then
            sudo mv "$TEMP_LOGROTATE" "$LOGROTATE_CONFIG"
            sudo chown root:root "$LOGROTATE_CONFIG"
            sudo chmod 644 "$LOGROTATE_CONFIG"
            echo "Logrotate configuration updated"
          else
            rm "$TEMP_LOGROTATE"
            echo "Logrotate configuration unchanged"
          fi

          # 检查磁盘监控脚本是否需要更新
          MONITOR_SCRIPT="/usr/local/bin/check-disk-space.sh"
          TEMP_MONITOR=$(mktemp)
          
          cat > $TEMP_MONITOR << 'EOF'
          #!/bin/bash
          LOG_DIR="/home/ubuntu/game-server/logs"
          MAX_USAGE_PERCENT=80
          
          USAGE=$(df / | tail -1 | awk '{print $5}' | sed 's/%//')
          
          if [ "$USAGE" -gt "$MAX_USAGE_PERCENT" ]; then
            echo "磁盘使用率超过 ${MAX_USAGE_PERCENT}%，清理旧日志..."
            find $LOG_DIR -type f -name "*.log" -mtime +30 -delete
            find $LOG_DIR -type f -name "*.log.gz" -mtime +30 -delete
            find $LOG_DIR -type d -empty -delete
          fi
          EOF

          # 只在脚本不存在或有变化时更新
          if [ ! -f "$MONITOR_SCRIPT" ] || ! sudo diff -q "$TEMP_MONITOR" "$MONITOR_SCRIPT" > /dev/null; then
            sudo mv "$TEMP_MONITOR" "$MONITOR_SCRIPT"
            sudo chmod +x "$MONITOR_SCRIPT"
            echo "Disk monitor script updated"
            
            # 检查 crontab 是否已经配置
            if ! crontab -l 2>/dev/null | grep -q "check-disk-space.sh"; then
              (crontab -l 2>/dev/null; echo "0 0 * * * $MONITOR_SCRIPT") | crontab -
              echo "Crontab entry added"
            fi
          else
            rm "$TEMP_MONITOR"
            echo "Disk monitor script unchanged"
          fi